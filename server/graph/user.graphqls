type User {
  id: ID!
  username: String!
  email: String!
  lastLogin: Time!
  createdAt: Time!
  updatedAt: Time!
}

type OverviewPayload {
  user: User!
}

type Auth {
  token: String!
  expires: Time!
}

input NewUser {
  username: String!
  email: String!
  password: String!
}

type CreateUserPayload {
  user: User!
  auth: Auth!
}

input UpdateUser {
  username: String
  email: String
  password: String
}

type UpdateUserPayload {
  user: User!
}

input Login {
  email: String!
  password: String!
}

type LoginPayload {
  user: User!
  auth: Auth!
}

input RefreshTokenInput {
  token: String!
}

type RefreshTokenPayload {
  user: User!
  auth: Auth!
}

extend type Query {
  overview: OverviewPayload!
}

extend type Mutation {
  createUser(input: NewUser!): CreateUserPayload!
  login(input: Login!): LoginPayload!
  refreshToken(input: RefreshTokenInput!): RefreshTokenPayload!
  updateUser(input: UpdateUser!): UpdateUserPayload!
}

// Code generated by entc, DO NOT EDIT.

package ent

import (
	"StegoLSB/ent/image"
	"StegoLSB/ent/schema/ulid"
	"time"
)

// CreateImageInput represents a mutation input for creating images.
type CreateImageInput struct {
	CreatedAt *time.Time
	UpdatedAt *time.Time
	Channel   image.Channel
	UserID    *ulid.ID
}

// Mutate applies the CreateImageInput on the ImageCreate builder.
func (i *CreateImageInput) Mutate(m *ImageCreate) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetChannel(i.Channel)
	if v := i.UserID; v != nil {
		m.SetUserID(*v)
	}
}

// SetInput applies the change-set in the CreateImageInput on the create builder.
func (c *ImageCreate) SetInput(i CreateImageInput) *ImageCreate {
	i.Mutate(c)
	return c
}

// UpdateImageInput represents a mutation input for updating images.
type UpdateImageInput struct {
	ID        ulid.ID
	UpdatedAt *time.Time
	Channel   *image.Channel
	UserID    *ulid.ID
	ClearUser bool
}

// Mutate applies the UpdateImageInput on the ImageMutation.
func (i *UpdateImageInput) Mutate(m *ImageMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.Channel; v != nil {
		m.SetChannel(*v)
	}
	if i.ClearUser {
		m.ClearUser()
	}
	if v := i.UserID; v != nil {
		m.SetUserID(*v)
	}
}

// SetInput applies the change-set in the UpdateImageInput on the update builder.
func (u *ImageUpdate) SetInput(i UpdateImageInput) *ImageUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateImageInput on the update-one builder.
func (u *ImageUpdateOne) SetInput(i UpdateImageInput) *ImageUpdateOne {
	i.Mutate(u.Mutation())
	return u
}

// CreateUserInput represents a mutation input for creating users.
type CreateUserInput struct {
	CreatedAt *time.Time
	UpdatedAt *time.Time
	Name      string
	Password  string
	ImageIDs  []ulid.ID
}

// Mutate applies the CreateUserInput on the UserCreate builder.
func (i *CreateUserInput) Mutate(m *UserCreate) {
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetName(i.Name)
	m.SetPassword(i.Password)
	if ids := i.ImageIDs; len(ids) > 0 {
		m.AddImageIDs(ids...)
	}
}

// SetInput applies the change-set in the CreateUserInput on the create builder.
func (c *UserCreate) SetInput(i CreateUserInput) *UserCreate {
	i.Mutate(c)
	return c
}

// UpdateUserInput represents a mutation input for updating users.
type UpdateUserInput struct {
	ID             ulid.ID
	UpdatedAt      *time.Time
	Name           *string
	Password       *string
	AddImageIDs    []ulid.ID
	RemoveImageIDs []ulid.ID
}

// Mutate applies the UpdateUserInput on the UserMutation.
func (i *UpdateUserInput) Mutate(m *UserMutation) {
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if v := i.Password; v != nil {
		m.SetPassword(*v)
	}
	if ids := i.AddImageIDs; len(ids) > 0 {
		m.AddImageIDs(ids...)
	}
	if ids := i.RemoveImageIDs; len(ids) > 0 {
		m.RemoveImageIDs(ids...)
	}
}

// SetInput applies the change-set in the UpdateUserInput on the update builder.
func (u *UserUpdate) SetInput(i UpdateUserInput) *UserUpdate {
	i.Mutate(u.Mutation())
	return u
}

// SetInput applies the change-set in the UpdateUserInput on the update-one builder.
func (u *UserUpdateOne) SetInput(i UpdateUserInput) *UserUpdateOne {
	i.Mutate(u.Mutation())
	return u
}
